#!/usr/bin/env python3

import os
import sys
import re
import textwrap

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

if len(sys.argv) != 2:
    print("[usage] %s [p.tex]" % sys.argv[0])
    exit(0)

pn_main = sys.argv[1]

def uppercase_cond(value):
    if value[0].islower():
        return value
    upcond = True
    for i in range(1,len(value)):
        if value[i].isupper():
            upcond = False
            break
    if upcond:
        return value.upper()
    else:
        return value

def get_keywords(tex):
    rtn = {}
    tok = re.findall(r"\\newcommand{\\([^}]+)}{(.*)}", tex)
    for (k, v) in tok:
        # clean up v
        v = v.replace("\\mbox{", "")
        v = v.replace("\\textsc{", "")
        v = v.replace("\\cc{", "")
        v = v.replace("\\xspace", "")
        v = v.replace("}", "")
        v = v.replace("{", "")
        v = v.replace("\\", "")
        if k == "sys":
            rtn[k] = uppercase_cond(v)
        else:
            rtn[k] = v
    return rtn

def get_latex_files(tex):
    tex = tex.replace('\n', '\t')
    tok = re.findall(r'maketitle(.*?)graphy', tex)[0]
    tok = tok.split('\t')
    files = []
    for t in tok:
        if t and t.startswith('\\input'):
            files.append(t[7:-1] + '.tex')
    return files

def get_sys(tex):
    tok = re.findall(r"\\newcommand{\\sys}{\\mbox{\\textsc{([^}]*)}", tex)
    if len(tok) == 0:
        print("Failed to find 'sys'")
        exit(1)
    return tok[0]

pn_main_text = open(pn_main).read()
kw = get_keywords(pn_main_text)
files = get_latex_files(pn_main_text)

remove_prefix = ['section', 'subsection', 'labels:', 'PP', 'labelss:', 'labelfig:']

def ext_text(f):
    textlines = []
    for l in open(f):
        l = l.strip()
        if l.startswith("%"):
            continue
        if l.endswith("%"):
            l = l[:-1]

        if "{abstract}" in l:
            continue
    
        for k, v in kw.items():
            l = l.replace("\\%s" % k, v)
        
        l = re.sub(r'(?s)(cite\{)(.*?)(\})', r'[]', l)
        l = re.sub(r'(?s)(autoref\{)(.*?)(\})', r'[]', l)
        l = re.sub(r'(?s)(vspace\{)(.*?)(\})', r'', l)
        l = l.replace('\\noindent', '')
        l = l.replace('\\bf', '')
    
        l = l.replace("\\%", "%")
        l = l.replace("\\emph{", "")
        l = l.replace("\\cc{", "")
        l = l.replace("\\mbox{", "")
        l = l.replace("{", "")
        l = l.replace("}", "")
        l = l.replace("~", " ")
        l = l.replace("\\,", " ")
        l = l.replace("\\X", "x")
        l = l.replace("\\&", "&")
        l = l.replace("\\@", "")
        l = l.replace("\\$", "$")
        l = l.replace("---", " -- ")
        l = l.replace("--", "-")
        l = l.replace("``", "'")
        l = l.replace("''", "'")
        l = l.replace("\\ie", "i.e.")
        l = l.replace("\\eg", "e.g.")
        l = l.replace("\\etal", " et al.")
        l = l.replace("\\Bs", " B/s")
        l = l.replace("\\KBs", " KB/s")
        l = l.replace("\\MBs", " MB/s")
        l = l.replace("\\GBs", " GB/s")
        l = l.replace("\\KB", " KB")
        l = l.replace("\\MB", " MB")
        l = l.replace("\\GB", " GB")
        l = l.replace("\\TB", " TB")
        l = l.replace("\\B", " B")
        l = l.replace("\\K", " K")
        l = l.replace("\\M", " M")
        l = l.replace("\\T", " T")
        l = l.replace("\\", "")
    
        if "\\" in l:
            print("WARN: unresolved char in", file=sys.stderr)
            print(" > %s" % l, file=sys.stderr)
        
        
        for prefix in remove_prefix:
            if l.startswith(prefix):
                l = ''
                break
        
        if l: textlines.append(l)
    text = "\n".join(textlines)
    #text = re.sub(r'(?s)(\(autoref)(.*?)(\))', r'[]', text)
    text = re.sub(r'(?s)(beginfigure)(.*?)(endfigure)', r' ', text)
    text = re.sub(r'(?s)(beginenumerate)(.*?)(endenumerate)', r' ', text)
    text = text.replace('\n', ' ')
    return text

def text_checker(text):
    warning = ['XXX', 'TODO', '??', 'BL']
    words = ' / '.join(warning)
    print (f'{bcolors.FAIL}Please check following words in the paper: {words}{bcolors.ENDC}')
    for w in warning:
        c = text.count(w)
        if c > 0:
            print (f'{bcolors.WARNING}[Warning] {w} is written {c} times in the paper!!{bcolors.ENDC}', file=sys.stderr)

content = ''
for f in files:
    content += str(f) + '\n'
    content += ext_text(f) + '\n\n'

print (content)
text_checker(content)
